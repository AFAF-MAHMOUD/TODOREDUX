{"version":3,"sources":["App.js","serviceWorker.js","Reducers/listtodoReducer.js","Reducers/ChangeTxtReducer.js","store.js","index.js"],"names":["App","props","add","text","changeText","ADD_TODO","console","log","this","type","onChange","e","CHANGE_TXT","onClick","listTodo","map","el","i","key","delete","id","Component","connect","listtodoreducers","dispatch","undo","value","target","Boolean","window","location","hostname","match","intiState","state","action","Math","random","changeTextReducers","store","createStore","combineReducers","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uRAMMA,G,kBACJ,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAKVC,IAAI,WAEF,IAAIC,EAAK,EAAKF,MAAMG,WACtB,EAAKH,MAAMI,SAASF,EAAK,gBATJ,E,sEAYT,IAAD,OAEP,OADJG,QAAQC,IAAK,OAAOC,KAAKP,MAAMG,YAE/B,iCAEM,2BAAOK,KAAK,OAAQC,SAAU,SAACC,GAAK,EAAKV,MAAMW,WAAWD,MAC1D,0BAAME,QAASL,KAAKN,KAApB,OACA,mCACKM,KAAKP,MAAMa,SAASC,KAAI,SAACC,EAAIC,GAC5B,OACE,uBAAGC,IAAKD,GACN,8BAAOD,EAAGb,MACV,0BAAMU,QAAS,kBAAM,EAAKM,OAAOH,EAAGI,MAApC,oB,GAzBEC,cAoDFC,eAPS,SAAC,GACxB,MAAO,CACLR,SAFwD,EAAjCS,iBAGvBnB,WAHwD,EAAhBA,eAXf,SAACoB,GAC3B,MAAO,CACNnB,SAAS,SAACF,EAAKsB,GACZD,EAAS,CAACf,KAAK,WAAWN,KAAKA,EAAKsB,KAAKA,KAG3Cb,WAAW,SAACD,GACXa,EAAS,CAACf,KAAK,aAAaiB,MAAMf,EAAEgB,OAAOD,YAWjCJ,CAA4CtB,GC9CxC4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mBCjBAC,EAAU,CACZ,CAAE,GAAM,EAAG,KAAQ,SAEf,CAAE,GAAM,EAAG,KAAQ,QAAQ,KAAO,aAClC,CAAE,GAAM,EAAG,KAAQ,UAaZV,EAVQ,WAA2B,IAA1BW,EAAyB,uDAAnBD,EAAUE,EAAS,uCAC7C,MAAkB,aAAdA,EAAO1B,KAEL,GAAN,mBAAWyB,GAAX,CAAiB,CAAC,GAAKE,KAAKC,OAAO,KAAOF,EAAOhC,KAAK,KAAOgC,EAAOV,QAGjES,GCRQI,EANU,WAAsB,IAArBJ,EAAoB,uDAAd,KAAKC,EAAS,uCAC1C,MAAiB,eAAdA,EAAO1B,KACC0B,EAAOT,MAEfQ,GCOQK,EALHC,YAAYC,YAAgB,CACxClB,iBAAiBA,EACjBnB,WAAWA,KCDXsC,IAASC,OAAO,kBAAC,IAAD,CAAUJ,MAAQA,GAAlB,IAA0B,kBAAC,EAAD,OAAoBK,SAASC,eAAe,SJ4HhF,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5dca65b2.chunk.js","sourcesContent":["import React ,{Component}from 'react';\n\n\nimport {connect} from 'react-redux';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n   \n  }\n\n\nadd=()=>{\n  //text,und\n  let text=this.props.changeText\nthis.props.ADD_TODO(text,\"text-normal\")\n}\n\n  render() { \nconsole.log( \"text\"+this.props.changeText)\n    return ( \n<section>\n\n      <input type=\"text\"  onChange={(e)=>{this.props.CHANGE_TXT(e)}} ></input>\n      <span onClick={this.add}>Add</span>\n      <div>   { /*List */}\n          {this.props.listTodo.map((el, i) => {\n            return (\n              <p key={i}>\n                <span>{el.text}</span>\n                <span onClick={() => this.delete(el.id)}>delete</span>\n              </p>)\n          })}\n        </div>\n\n        </section>\n     );\n  }\n}\n  const mapDispatchToProps = (dispatch) => {\n   return {\n    ADD_TODO:(text,undo)=>{\n       dispatch({type:'add-todo',text:text,undo:undo})\n     },\n\n     CHANGE_TXT:(e)=>{\n      dispatch({type:'CHANGE_TXT',value:e.target.value})\n    },\n   }\n }\n const mapStateToProps = ({listtodoreducers,changeText}) => {\n  return {\n    listTodo:listtodoreducers,\n    changeText:changeText\n    }\n  }\n\n export default connect(mapStateToProps,mapDispatchToProps)(App)","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\r\nconst intiState=[\r\n    { \"id\": 0, \"text\": \"item1\" },\r\n\r\n        { \"id\": 1, \"text\": \"item2\",\"undo\":\"text-undo\" },\r\n        { \"id\": 2, \"text\": \"item3\" }\r\n]\r\n\r\nconst listtodoreducers=(state=intiState,action)=>{\r\n    if (action.type===\"add-todo\")\r\n{    \r\n    return [...state,{\"id\":Math.random,\"text\":action.text,\"undo\":action.undo}]\r\n}\r\n\r\nreturn state\r\n}\r\n\r\n\r\nexport default listtodoreducers","const changeTextReducers=(state='ff',action)=>{\r\n    if(action.type===\"CHANGE_TXT\"){\r\n        return action.value\r\n    }\r\nreturn state\r\n}\r\nexport default changeTextReducers","import {createStore,combineReducers} from \"redux\";\r\nimport listtodoreducers  from './Reducers/listtodoReducer';\r\nimport changeText  from './Reducers/ChangeTxtReducer';\r\n\r\n\r\n\r\nconst store=createStore(combineReducers({\r\nlisttodoreducers:listtodoreducers,\r\nchangeText:changeText\r\n})\r\n)\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport{Provider} from 'react-redux';\nimport store from \"./store\";\nReactDOM.render(<Provider store ={store}> <App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}